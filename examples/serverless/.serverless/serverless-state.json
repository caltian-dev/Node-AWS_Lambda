{
  "service": {
    "service": "tracing",
    "serviceObject": {
      "name": "tracing"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs16.x",
      "timeout": 10,
      "region": "eu-west-2",
      "architecture": "arm64",
      "versionFunctions": false,
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:updateItem"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "DB",
                  "Arn"
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "sns:publish"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "events:PutEvents"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "environment": {
        "BASELIME_KEY": "zakbQcPvJOaIKxv8jacnxr7weYdxmvT7ia2qw5pj",
        "NODE_OPTIONS": "--require node_modules/@baselime/lambda-node-opentelemetry/lambda-wrapper.js",
        "OTEL_LOG_LEVEL": "debug",
        "COLLECTOR_URL": "https://otel.baselime.cc/v1"
      },
      "stage": "dev",
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "HelloLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tracing-prod-hello"
            }
          },
          "WaitDashforDashitLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tracing-prod-wait-for-it"
            }
          },
          "ApiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tracing-prod-api"
            }
          },
          "DispatcherLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tracing-prod-dispatcher"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "tracing",
                        "prod",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tracing-prod*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tracing-prod*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][1]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][2]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "tracing",
                    "prod",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "HelloLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tracing/prod/1686594684446-2023-06-12T18:31:24.446Z/hello.zip"
              },
              "Handler": "src/main.handler",
              "Runtime": "nodejs16.x",
              "FunctionName": "tracing-prod-hello",
              "MemorySize": 1024,
              "Timeout": 10,
              "Architectures": [
                "arm64"
              ],
              "Environment": {
                "Variables": {
                  "BASELIME_KEY": "zakbQcPvJOaIKxv8jacnxr7weYdxmvT7ia2qw5pj",
                  "NODE_OPTIONS": "--require node_modules/@baselime/lambda-node-opentelemetry/lambda-wrapper.js",
                  "OTEL_LOG_LEVEL": "debug",
                  "COLLECTOR_URL": "https://otel.baselime.cc/v1",
                  "API_URL": {
                    "Fn::GetAtt": [
                      "HttpApi",
                      "ApiEndpoint"
                    ]
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "HelloLogGroup"
            ]
          },
          "WaitDashforDashitLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tracing/prod/1686594684446-2023-06-12T18:31:24.446Z/wait-for-it.zip"
              },
              "Handler": "src/eventbridge.handler",
              "Runtime": "nodejs16.x",
              "FunctionName": "tracing-prod-wait-for-it",
              "MemorySize": 1024,
              "Timeout": 10,
              "Architectures": [
                "arm64"
              ],
              "Environment": {
                "Variables": {
                  "BASELIME_KEY": "zakbQcPvJOaIKxv8jacnxr7weYdxmvT7ia2qw5pj",
                  "NODE_OPTIONS": "--require node_modules/@baselime/lambda-node-opentelemetry/lambda-wrapper.js",
                  "OTEL_LOG_LEVEL": "debug",
                  "COLLECTOR_URL": "https://otel.baselime.cc/v1"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "WaitDashforDashitLogGroup"
            ]
          },
          "ApiLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tracing/prod/1686594684446-2023-06-12T18:31:24.446Z/api.zip"
              },
              "Handler": "src/api.handler",
              "Runtime": "nodejs16.x",
              "FunctionName": "tracing-prod-api",
              "MemorySize": 1024,
              "Timeout": 10,
              "Architectures": [
                "arm64"
              ],
              "Environment": {
                "Variables": {
                  "BASELIME_KEY": "zakbQcPvJOaIKxv8jacnxr7weYdxmvT7ia2qw5pj",
                  "NODE_OPTIONS": "--require node_modules/@baselime/lambda-node-opentelemetry/lambda-wrapper.js",
                  "OTEL_LOG_LEVEL": "debug",
                  "COLLECTOR_URL": "https://otel.baselime.cc/v1",
                  "DB_NAME": {
                    "Ref": "DB"
                  },
                  "TOPIC_ARN": {
                    "Ref": "SNSTopicDispatch"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ApiLogGroup"
            ]
          },
          "DispatcherLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tracing/prod/1686594684446-2023-06-12T18:31:24.446Z/dispatcher.zip"
              },
              "Handler": "src/dispatcher.handler",
              "Runtime": "nodejs16.x",
              "FunctionName": "tracing-prod-dispatcher",
              "MemorySize": 1024,
              "Timeout": 10,
              "Architectures": [
                "arm64"
              ],
              "Environment": {
                "Variables": {
                  "BASELIME_KEY": "zakbQcPvJOaIKxv8jacnxr7weYdxmvT7ia2qw5pj",
                  "NODE_OPTIONS": "--require node_modules/@baselime/lambda-node-opentelemetry/lambda-wrapper.js",
                  "OTEL_LOG_LEVEL": "debug",
                  "COLLECTOR_URL": "https://otel.baselime.cc/v1"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DispatcherLogGroup"
            ]
          },
          "HelloEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "rate(5 minutes)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "HelloLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "helloSchedule"
                }
              ]
            }
          },
          "HelloLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "HelloLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "HelloEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "SNSTopicDispatch": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
              "TopicName": "dispatch",
              "Subscription": [
                {
                  "Endpoint": {
                    "Fn::GetAtt": [
                      "DispatcherLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Protocol": "lambda"
                }
              ]
            }
          },
          "DispatcherLambdaPermissionDispatchSNS": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DispatcherLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "sns.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":sns:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    "dispatch"
                  ]
                ]
              }
            }
          },
          "Tracingprodwaitforitrule1EventBridgeRule": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "EventPattern": {
                "source": [
                  "baselime"
                ]
              },
              "Name": "tracing-prod-wait-for-it-rule-1",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "WaitDashforDashitLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "tracing-prod-wait-for-it-rule-1-target"
                }
              ]
            }
          },
          "WaitDashforDashitEventBridgeLambdaPermission1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "Action": "lambda:InvokeFunction",
              "FunctionName": {
                "Ref": "WaitDashforDashitLambdaFunction"
              },
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  ":",
                  [
                    "arn",
                    {
                      "Ref": "AWS::Partition"
                    },
                    "events",
                    {
                      "Ref": "AWS::Region"
                    },
                    {
                      "Ref": "AWS::AccountId"
                    },
                    {
                      "Fn::Join": [
                        "/",
                        [
                          "rule",
                          "tracing-prod-wait-for-it-rule-1"
                        ]
                      ]
                    }
                  ]
                ]
              }
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "prod-tracing",
              "ProtocolType": "HTTP"
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "ApiLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ApiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationApi": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetHello": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /hello",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationApi"
          },
          "DB": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ]
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-tracing-prod-ServerlessDeploymentBucketName"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-tracing-prod-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-tracing-prod-HttpApiUrl"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "plugins": [
      "serverless-esbuild"
    ],
    "pluginsData": {},
    "functions": {
      "hello": {
        "handler": "src/main.handler",
        "events": [
          {
            "schedule": "rate(5 minutes)"
          }
        ],
        "environment": {
          "API_URL": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"HelloLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"API_URL\"]"
          }
        },
        "name": "tracing-prod-hello",
        "package": {
          "artifact": ".serverless/hello.zip"
        },
        "memory": 1024,
        "timeout": 10,
        "runtime": "nodejs16.x",
        "vpc": {}
      },
      "wait-for-it": {
        "handler": "src/eventbridge.handler",
        "events": [
          {
            "eventBridge": {
              "pattern": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"Tracingprodwaitforitrule1EventBridgeRule\"][\"Properties\"][\"EventPattern\"]"
              }
            }
          }
        ],
        "name": "tracing-prod-wait-for-it",
        "package": {
          "artifact": ".serverless/wait-for-it.zip"
        },
        "memory": 1024,
        "timeout": 10,
        "runtime": "nodejs16.x",
        "vpc": {}
      },
      "api": {
        "handler": "src/api.handler",
        "events": [
          {
            "httpApi": {
              "method": "get",
              "path": "/hello"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/hello"
          }
        ],
        "environment": {
          "DB_NAME": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"DB_NAME\"]"
          },
          "TOPIC_ARN": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"TOPIC_ARN\"]"
          }
        },
        "name": "tracing-prod-api",
        "package": {
          "artifact": ".serverless/api.zip"
        },
        "memory": 1024,
        "timeout": 10,
        "runtime": "nodejs16.x",
        "vpc": {}
      },
      "dispatcher": {
        "handler": "src/dispatcher.handler",
        "events": [
          {
            "sns": "dispatch"
          }
        ],
        "name": "tracing-prod-dispatcher",
        "package": {
          "artifact": ".serverless/dispatcher.zip"
        },
        "memory": 1024,
        "timeout": 10,
        "runtime": "nodejs16.x",
        "vpc": {}
      }
    },
    "resources": {
      "Resources": {
        "DB": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ]
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "tracing",
      "package": {
        "individually": true,
        "patterns": [
          "node_modules/@baselime/lambda-node-opentelemetry"
        ],
        "artifactsS3KeyDirname": "serverless/tracing/prod/code-artifacts"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "individually": true,
    "artifactDirectoryName": "serverless/tracing/prod/1686594684446-2023-06-12T18:31:24.446Z",
    "artifact": ""
  }
}